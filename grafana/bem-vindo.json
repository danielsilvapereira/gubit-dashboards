{
  "apiVersion": "dashboard.grafana.app/v2alpha1",
  "kind": "Dashboard",
  "metadata": {
    "name": "dej10p1h334e8d"
  },
  "spec": {
    "annotations": [
      {
        "kind": "AnnotationQuery",
        "spec": {
          "builtIn": true,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations \u0026 Alerts"
        }
      }
    ],
    "cursorSync": "Off",
    "editable": true,
    "elements": {
      "panel-1": {
        "kind": "Panel",
        "spec": {
          "data": {
            "kind": "QueryGroup",
            "spec": {
              "queries": [],
              "queryOptions": {},
              "transformations": []
            }
          },
          "description": "",
          "id": 1,
          "links": [],
          "title": "",
          "vizConfig": {
            "kind": "text",
            "spec": {
              "fieldConfig": {
                "defaults": {},
                "overrides": []
              },
              "options": {
                "code": {
                  "language": "plaintext",
                  "showLineNumbers": false,
                  "showMiniMap": false
                },
                "content": "\u003cdiv id=\"dashboard-list\"\u003e\n  \u003ch2\u003eDashboards\u003c/h2\u003e\n  \u003cp\u003eCarregando...\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n  /* Estilo Geral */\n  #dashboard-list {\n    font-family: Arial, sans-serif;\n    color: #e0e0e0;\n  }\n\n  h2 {\n    font-size: 1.5em;\n    color: #87ceeb;\n    border-bottom: 2px solid #444;\n    padding-bottom: 5px;\n    margin-bottom: 15px;\n  }\n\n  .grid-container {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 10px;\n    padding: 10px;\n  }\n\n  .card {\n    background-color: #2b2b2b;\n    border: 1px solid #444;\n    border-radius: 8px;\n    padding: 8px;\n    overflow: hidden;\n    cursor: pointer;\n    transition: transform 0.3s, box-shadow 0.3s;\n  }\n\n  .card:hover {\n    transform: scale(1.03);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);\n  }\n\n  .card-header {\n    font-size: 1.3em;\n    color: #87ceeb;\n    margin-bottom: 10px;\n    text-align: center;\n    font-weight: bold;\n  }\n\n  .card-separator {\n    margin: 10px 0;\n    border: 0;\n    border-top: 1px solid #444;\n    width: 100%;\n  }\n\n  .dashboard-link {\n    text-decoration: none !important;\n    color: #ffffff !important;\n    margin: 5px 0;\n    display: block;\n    padding-left: 10px;\n    cursor: pointer;\n  }\n\n  .dashboard-link:hover {\n    color: #dddddd !important;\n    text-decoration: underline;\n  }\n\n  .subfolder {\n    margin-top: 10px;\n    border-left: 2px solid #555;\n    padding-left: 10px;\n  }\n\n  .subfolder-title {\n    font-size: 1.1em;\n    color: #87ceeb;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    background-color: #333;\n    padding: 4px 8px;\n    border-radius: 4px;\n    transition: background-color 0.3s;\n  }\n\n  .subfolder-title:hover {\n    background-color: #3d3d3d;\n  }\n\n  .subfolder .dashboard-link {\n    padding-left: 20px;\n  }\n\u003c/style\u003e\n\n\u003cscript\u003e\n  (function () {\n    const iconMap = {\n      \"ADMINISTRATIVO\": \"üè¢\",\n      \"ALERTAS\": \"üö®\",\n      \"ATIVOS DE REDE\": \"üåê\",\n      \"AUDITORIAS E CONTROLES INTERNOS\": \"üìú\",\n      \"BANCO DE DADOS\": \"üíæ\",\n      \"DATACENTER \u0026 SERVIDORES\": \"üñ•Ô∏è\",\n      \"INVENT√ÅRIO\": \"üì¶\",\n      \"NETWORK SECURITY\": \"üõ°Ô∏è\",\n      \"SERVI√áOS E SISTEMAS\": \"‚öôÔ∏è\",\n      \"TELEFONIA\": \"üìû\",\n      \"Default\": \"üìÇ\"\n    };\n\n    async function fetchWithTimeout(url, options = {}, timeout = 5000) {\n      return Promise.race([\n        fetch(url, options),\n        new Promise((_, reject) =\u003e\n          setTimeout(() =\u003e reject(new Error(`Timeout ao carregar: ${url}`)), timeout)\n        ),\n      ]);\n    }\n\n    async function fetchFoldersAndDashboards() {\n      try {\n        document.getElementById('dashboard-list').innerHTML = '\u003cp\u003eCarregando...\u003c/p\u003e';\n\n        const fetchOptions = {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' },\n        };\n\n        const searchResponse = await fetchWithTimeout('/api/search', fetchOptions);\n        const items = await searchResponse.json();\n\n        const folders = items.filter(item =\u003e item.type === 'dash-folder');\n        const dashboards = items.filter(item =\u003e item.type === 'dash-db');\n\n        const folderDetails = await Promise.allSettled(\n          folders.map(folder =\u003e\n            fetchWithTimeout(`/api/folders/${folder.uid}`, fetchOptions).then(res =\u003e res.json())\n          )\n        );\n\n        const folderMap = folderDetails.reduce((map, result, index) =\u003e {\n          if (result.status === 'fulfilled') {\n            const folder = result.value;\n            map[folders[index].uid] = { ...folder, dashboards: [], children: [] };\n          } else {\n            console.error(`Erro ao carregar pasta: ${folders[index].title}`, result.reason);\n          }\n          return map;\n        }, {});\n\n        dashboards.forEach(dashboard =\u003e {\n          if (dashboard.folderUid \u0026\u0026 folderMap[dashboard.folderUid]) {\n            folderMap[dashboard.folderUid].dashboards.push(dashboard);\n          }\n        });\n\n        Object.values(folderMap).forEach(folder =\u003e {\n          if (folder.parentUid \u0026\u0026 folderMap[folder.parentUid]) {\n            folderMap[folder.parentUid].children.push(folder);\n          }\n        });\n\n        renderDashboards(folderMap);\n      } catch (error) {\n        console.error('Erro ao carregar dados:', error);\n        document.getElementById('dashboard-list').innerHTML =\n          '\u003cp\u003eErro ao carregar dados. Por favor, tente novamente.\u003c/p\u003e';\n      }\n    }\n\n    function countDashboards(folder) {\n      let count = folder.dashboards.length;\n      folder.children.forEach(child =\u003e {\n        count += countDashboards(child);\n      });\n      return count;\n    }\n\n    function renderDashboards(folderMap) {\n      const gridContainer = document.createElement('div');\n      gridContainer.className = 'grid-container';\n\n      Object.values(folderMap)\n        .filter(folder =\u003e !folder.parentUid)\n        .forEach(folder =\u003e {\n          const card = buildFolderCard(folder, folderMap, 0);\n          gridContainer.appendChild(card);\n        });\n\n      document.getElementById('dashboard-list').innerHTML = '';\n      document.getElementById('dashboard-list').appendChild(gridContainer);\n    }\n\n    function buildFolderCard(folder, folderMap, depth = 0) {\n      const card = document.createElement('div');\n      card.className = 'card';\n      card.style.marginLeft = `${depth * 10}px`;\n\n      const header = document.createElement('div');\n      header.className = 'card-header';\n      header.textContent =\n        depth === 0\n          ? `${iconMap[folder.title.toUpperCase()] || iconMap.Default} ${folder.title}`\n          : `${folder.title}`;\n\n      const content = document.createElement('div');\n      content.className = 'card-content';\n\n      if (folder.dashboards.length \u003e 0) {\n        const dashboardSeparator = document.createElement('hr');\n        dashboardSeparator.className = 'card-separator';\n        content.appendChild(dashboardSeparator);\n\n        folder.dashboards.forEach(dashboard =\u003e {\n          const dashboardLink = document.createElement('a');\n          dashboardLink.href = dashboard.url;\n          dashboardLink.className = 'dashboard-link';\n          dashboardLink.textContent = `üìä ${dashboard.title}`;\n          content.appendChild(dashboardLink);\n        });\n      }\n\n      if (folder.children.length \u003e 0) {\n        const subfolderSeparator = document.createElement('hr');\n        subfolderSeparator.className = 'card-separator';\n        content.appendChild(subfolderSeparator);\n\n        folder.children.forEach(subfolder =\u003e {\n          const subfolderDiv = document.createElement('div');\n          subfolderDiv.className = 'subfolder';\n\n          const dashCount = countDashboards(subfolder);\n          const subfolderTitle = document.createElement('div');\n          subfolderTitle.className = 'subfolder-title';\n          subfolderTitle.innerHTML = `\n            \u003cspan\u003e${subfolder.title} (${dashCount})\u003c/span\u003e\n            \u003cspan\u003e‚ûï\u003c/span\u003e\n          `;\n\n          const subfolderContent = document.createElement('div');\n          subfolderContent.className = 'card-content';\n          subfolderContent.style.display = 'none';\n\n          subfolderTitle.addEventListener('click', () =\u003e {\n            const isHidden = subfolderContent.style.display === 'none';\n            subfolderContent.style.display = isHidden ? 'block' : 'none';\n            subfolderTitle.querySelector('span:last-child').textContent = isHidden ? '‚ûñ' : '‚ûï';\n          });\n\n          subfolderContent.appendChild(\n            buildFolderCard(subfolder, folderMap, depth + 1)\n          );\n\n          subfolderDiv.appendChild(subfolderTitle);\n          subfolderDiv.appendChild(subfolderContent);\n          content.appendChild(subfolderDiv);\n        });\n      }\n\n      card.appendChild(header);\n      card.appendChild(content);\n      return card;\n    }\n\n    document.addEventListener('visibilitychange', () =\u003e {\n      if (document.visibilityState === 'visible') {\n        fetchFoldersAndDashboards();\n      }\n    });\n\n    fetchFoldersAndDashboards();\n  })();\n\u003c/script\u003e",
                "mode": "html"
              },
              "pluginVersion": "12.0.0"
            }
          }
        }
      }
    },
    "layout": {
      "kind": "GridLayout",
      "spec": {
        "items": [
          {
            "kind": "GridLayoutItem",
            "spec": {
              "element": {
                "kind": "ElementReference",
                "name": "panel-1"
              },
              "height": 21,
              "width": 24,
              "x": 0,
              "y": 0
            }
          }
        ]
      }
    },
    "links": [],
    "liveNow": false,
    "preload": false,
    "tags": [],
    "timeSettings": {
      "autoRefresh": "",
      "autoRefreshIntervals": [
        "5s",
        "10s",
        "30s",
        "1m",
        "5m",
        "15m",
        "30m",
        "1h",
        "2h",
        "1d"
      ],
      "fiscalYearStartMonth": 0,
      "from": "now-6h",
      "hideTimepicker": true,
      "timezone": "browser",
      "to": "now"
    },
    "title": "BEM VINDO",
    "variables": []
  },
  "status": {}
}